// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: experiment.proto

package experiment

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Experiments_Start_FullMethodName     = "/experiment.Experiments/Start"
	Experiments_Register_FullMethodName  = "/experiment.Experiments/Register"
	Experiments_MakeGuess_FullMethodName = "/experiment.Experiments/MakeGuess"
	Experiments_GetUsers_FullMethodName  = "/experiment.Experiments/GetUsers"
	Experiments_GetScores_FullMethodName = "/experiment.Experiments/GetScores"
)

// ExperimentsClient is the client API for Experiments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExperimentsClient interface {
	Start(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StartResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	MakeGuess(ctx context.Context, in *GuessRequest, opts ...grpc.CallOption) (*GuessResponse, error)
	GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserResponse], error)
	GetScores(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScoreResponse], error)
}

type experimentsClient struct {
	cc grpc.ClientConnInterface
}

func NewExperimentsClient(cc grpc.ClientConnInterface) ExperimentsClient {
	return &experimentsClient{cc}
}

func (c *experimentsClient) Start(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, Experiments_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentsClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Experiments_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentsClient) MakeGuess(ctx context.Context, in *GuessRequest, opts ...grpc.CallOption) (*GuessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuessResponse)
	err := c.cc.Invoke(ctx, Experiments_MakeGuess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentsClient) GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Experiments_ServiceDesc.Streams[0], Experiments_GetUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[empty.Empty, UserResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Experiments_GetUsersClient = grpc.ServerStreamingClient[UserResponse]

func (c *experimentsClient) GetScores(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScoreResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Experiments_ServiceDesc.Streams[1], Experiments_GetScores_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[empty.Empty, ScoreResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Experiments_GetScoresClient = grpc.ServerStreamingClient[ScoreResponse]

// ExperimentsServer is the server API for Experiments service.
// All implementations must embed UnimplementedExperimentsServer
// for forward compatibility.
type ExperimentsServer interface {
	Start(context.Context, *empty.Empty) (*StartResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	MakeGuess(context.Context, *GuessRequest) (*GuessResponse, error)
	GetUsers(*empty.Empty, grpc.ServerStreamingServer[UserResponse]) error
	GetScores(*empty.Empty, grpc.ServerStreamingServer[ScoreResponse]) error
	mustEmbedUnimplementedExperimentsServer()
}

// UnimplementedExperimentsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExperimentsServer struct{}

func (UnimplementedExperimentsServer) Start(context.Context, *empty.Empty) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedExperimentsServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedExperimentsServer) MakeGuess(context.Context, *GuessRequest) (*GuessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeGuess not implemented")
}
func (UnimplementedExperimentsServer) GetUsers(*empty.Empty, grpc.ServerStreamingServer[UserResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedExperimentsServer) GetScores(*empty.Empty, grpc.ServerStreamingServer[ScoreResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetScores not implemented")
}
func (UnimplementedExperimentsServer) mustEmbedUnimplementedExperimentsServer() {}
func (UnimplementedExperimentsServer) testEmbeddedByValue()                     {}

// UnsafeExperimentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExperimentsServer will
// result in compilation errors.
type UnsafeExperimentsServer interface {
	mustEmbedUnimplementedExperimentsServer()
}

func RegisterExperimentsServer(s grpc.ServiceRegistrar, srv ExperimentsServer) {
	// If the following call pancis, it indicates UnimplementedExperimentsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Experiments_ServiceDesc, srv)
}

func _Experiments_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentsServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Experiments_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentsServer).Start(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Experiments_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentsServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Experiments_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentsServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Experiments_MakeGuess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentsServer).MakeGuess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Experiments_MakeGuess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentsServer).MakeGuess(ctx, req.(*GuessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Experiments_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExperimentsServer).GetUsers(m, &grpc.GenericServerStream[empty.Empty, UserResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Experiments_GetUsersServer = grpc.ServerStreamingServer[UserResponse]

func _Experiments_GetScores_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExperimentsServer).GetScores(m, &grpc.GenericServerStream[empty.Empty, ScoreResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Experiments_GetScoresServer = grpc.ServerStreamingServer[ScoreResponse]

// Experiments_ServiceDesc is the grpc.ServiceDesc for Experiments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Experiments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "experiment.Experiments",
	HandlerType: (*ExperimentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Experiments_Start_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Experiments_Register_Handler,
		},
		{
			MethodName: "MakeGuess",
			Handler:    _Experiments_MakeGuess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsers",
			Handler:       _Experiments_GetUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetScores",
			Handler:       _Experiments_GetScores_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "experiment.proto",
}
